//
// Copyright (c) 2011-2014 Simon Mika <simon@mika.se>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

use ooc-math
import math

//IColor: interface {
//	set: func (color: IColor)
//	toMonochrome: func -> ColorMonochrome
//	toBgr: func -> ColorBgr
//	toBgra: func -> ColorBgra
//	toYuv: func -> ColorYuv
//	copy: func -> IColor
//	blend: func (factor: Float, other: IColor) -> Color
//	distance: func (other: IColor) -> Float
//}

ColorMonochrome: cover {
	y: UInt8
	set: func (color: This) {
		this y = color y
	}
	init: func@ (=y)
	init: func@ ~default { this init(0) }
	init: func@ ~int (i: Int) { this init(i as UInt8) }
	init: func@ ~float (f: Float) { this init(f*255.0f clamp(0.0f, 255.0f) as UInt8) }
	init: func@ ~double (d: Double) { this init(d*255.0f clamp(0.0f, 255.0f) as UInt8) }
	copy: func -> This { This new(this y) }
	toMonochrome: func -> This { this copy() }
	toYuv: func -> ColorYuv { ColorYuv new(this y, 128, 128) }
	toBgr: func -> ColorBgr { ColorConvert yuvToBgr(this toYuv()) }
	toBgra: func -> ColorBgra { this toBgr() toBgra() }
	blend: func (factor: Float, other: This) -> This {
		This new((this y * (1 - factor) + (other y * factor)) as UInt8)
	}
	distance: func (other: This) -> Float {
		(this y - other y) as Float abs()
	}
	equals: func ~monochrome (other: This) -> Bool { this y == other y }
	equals: func ~yuv (other: ColorYuv) -> Bool { false }
	equals: func ~bgr (other: ColorBgr) -> Bool { false }
	equals: func ~bgra (other: ColorBgra) -> Bool { false }
	operator == (other: This) -> Bool { this equals(other) }
	operator == (other: ColorYuv) -> Bool { this equals(other) }
	operator == (other: ColorBgr) -> Bool { this equals(other) }
	operator == (other: ColorBgra) -> Bool { this equals(other) }
	operator != (other: This) -> Bool { !this equals(other) }
	operator != (other: ColorYuv) -> Bool { !this equals(other) }
	operator != (other: ColorBgr) -> Bool { !this equals(other) }
	operator != (other: ColorBgra) -> Bool { !this equals(other) }
}

ColorUv: cover {
	u, v: UInt8
	set: func (color: This) {
		this u = color u
		this v = color v
	}
	init: func@ (=u, =v)
	init: func@ ~default { this init(0, 0) }
	init: func@ ~int (i: Int) { this init(i as UInt8) }
	init: func@ ~float (f: Float) { this init(f*255.0f clamp(0.0f, 255.0f) as UInt8) }
	init: func@ ~double (d: Double) { this init(d*255.0f clamp(0.0f, 255.0f) as UInt8) }
	copy: func -> This { This new(this u, this v) }
	toMonochrome: func -> ColorMonochrome { ColorMonochrome new() }
	toYuv: func -> ColorYuv { ColorYuv new(128, this u, this v) }
	toBgr: func -> ColorBgr { ColorConvert yuvToBgr(this toYuv()) }
	toBgra: func -> ColorBgra { this toBgr() toBgra() }
	blend: func (factor: Float, other: This) -> This {
		This new((this u * (1 - factor) + (other u * factor)) as UInt8, (this v * (1 - factor) + (other v * factor)) as UInt8)
	}
	distance: func (other: This) -> Float {
		((this u - other u) as Float pow(2) + (this v - other v) as Float pow(2)) / 2.0f sqrt()
	}
	equals: func ~uv (other: This) -> Bool { this u == other u && this v == other v }
	equals: func ~monochrome (other: ColorMonochrome) -> Bool { false }
	equals: func ~yuv (other: ColorYuv) -> Bool { false }
	equals: func ~bgr (other: ColorBgr) -> Bool { false }
	equals: func ~bgra (other: ColorBgra) -> Bool { false }
	operator == (other: This) -> Bool { this equals(other) }
	operator == (other: ColorYuv) -> Bool { this equals(other) }
	operator == (other: ColorBgr) -> Bool { this equals(other) }
	operator == (other: ColorBgra) -> Bool { this equals(other) }
	operator != (other: This) -> Bool { !this equals(other) }
	operator != (other: ColorYuv) -> Bool { !this equals(other) }
	operator != (other: ColorBgr) -> Bool { !this equals(other) }
	operator != (other: ColorBgra) -> Bool { !this equals(other) }
}

ColorYuv: cover {
	y, u, v: UInt8
	set: func (color: This) {
		this y = color y
		this u = color u
		this v = color v
	}
	init: func@ (=y, =u, =v)
	init: func@ ~default { this init(0, 0, 0) }
	init: func@ ~int (y, u, v: Int) { this init(y as UInt8, u as UInt8, v as UInt8) }
	init: func@ ~float (y, u, v: Float) { this init(y*255.0f clamp(0.0f, 255.0f) as UInt8, u*255.0f clamp(0.0f, 255.0f) as UInt8, v*255.0f clamp(0.0f, 255.0f) as UInt8) }
	init: func@ ~double (y, u, v: Double) { this init(y*255.0f clamp(0.0f, 255.0f) as UInt8, u*255.0f clamp(0.0f, 255.0f) as UInt8, v*255.0f clamp(0.0f, 255.0f) as UInt8) }
	copy: func -> This { This new(this y, this u, this v) }
	toMonochrome: func -> ColorMonochrome { ColorMonochrome new(this y) }
	toYuv: func -> This { this copy() }
	toBgr: func -> ColorBgr { ColorConvert yuvToBgr(this) }
	toBgra: func -> ColorBgra { this toBgr() toBgra() }
	blend: func (factor: Float, other: This) -> This {
		This new((this y * (1 - factor) + other y * factor) as UInt8, (this u * (1 - factor) + other u * factor) as UInt8, (this v * (1 - factor) + other v * factor) as UInt8)
	}
	distance: func (other: This) -> Float {
		((this y - other y) as Float pow(2) + (this u - other u) as Float pow(2) + (this v - other v) as Float pow(2)) / 3.0f sqrt()
	}
	equals: func ~monochrome (other: ColorMonochrome) -> Bool { false }
	equals: func ~yuv (other: This) -> Bool { this y == other y && this u == other u && this v == other v }
	equals: func ~bgr (other: ColorBgr) -> Bool { false }
	equals: func ~bgra (other: ColorBgra) -> Bool { false }
	operator == (other: ColorMonochrome) -> Bool { this equals(other) }
	operator == (other: This) -> Bool { this equals(other) }
	operator == (other: ColorBgr) -> Bool { this equals(other) }
	operator == (other: ColorBgra) -> Bool { this equals(other) }
	operator != (other: ColorMonochrome) -> Bool { !this equals(other) }
	operator != (other: This) -> Bool { !this equals(other) }
	operator != (other: ColorBgr) -> Bool { !this equals(other) }
	operator != (other: ColorBgra) -> Bool { !this equals(other) }
}

ColorBgr: cover {
	blue, green, red: UInt8
	set: func (color: This) {
		this blue = color blue
		this green = color green
		this red = color red
	}
	init: func@ (=blue, =green, =red)
	init: func@ ~default { this init(0, 0, 0) }
	init: func@ ~int (b, g, r: Int) { this init(b as UInt8, g as UInt8, r as UInt8) }
	init: func@ ~float (b, g, r: Float) { this init(b*255.0f clamp(0.0f, 255.0f) as UInt8, g*255.0f clamp(0.0f, 255.0f) as UInt8, r*255.0f clamp(0.0f, 255.0f) as UInt8) }
	init: func@ ~double (b, g, r: Double) { this init(b*255.0f clamp(0.0f, 255.0f) as UInt8, g*255.0f clamp(0.0f, 255.0f) as UInt8, r*255.0f clamp(0.0f, 255.0f) as UInt8) }
	copy: func -> This { This new(this blue, this green, this red) }
	toMonochrome: func -> ColorMonochrome { ColorMonochrome new(this toYuv() y) }
	toYuv: func -> ColorYuv { ColorConvert bgrToYuv(this) }
	toBgr: func -> This { this copy() }
	toBgra: func -> ColorBgra { ColorBgra new(this copy(), 255) }
	blend: func (factor: Float, other: This) -> This {
		This new((this blue * (1 - factor) + other blue * factor) as UInt8, (this green * (1 - factor) + other green * factor) as UInt8, (this red * (1 - factor) + other red * factor) as UInt8)
	}
	distance: func (other: This) -> Float {
		((this blue - other blue) as Float pow(2) + (this green - other green) as Float pow(2) + (this red - other red) as Float pow(2)) / 3.0f sqrt()
	}
	equals: func ~monochrome (other: ColorMonochrome) -> Bool { false }
	equals: func ~yuv (other: ColorYuv) -> Bool { false }
	equals: func ~bgr (other: This) -> Bool { this blue == other blue && this green == other green && this red == other red }
	equals: func ~bgra (other: ColorBgra) -> Bool { false }
	operator == (other: ColorMonochrome) -> Bool { this equals(other) }
	operator == (other: ColorYuv) -> Bool { this equals(other) }
	operator == (other: This) -> Bool { this equals(other) }
	operator == (other: ColorBgra) -> Bool { this equals(other) }
	operator != (other: ColorMonochrome) -> Bool { !this equals(other) }
	operator != (other: ColorYuv) -> Bool { !this equals(other) }
	operator != (other: This) -> Bool { !this equals(other) }
	operator != (other: ColorBgra) -> Bool { !this equals(other) }
	svgRGBToString: func -> String {
		result := this red toString() & "," clone() & this green toString() & "," clone() & this blue toString()
		result
	}
}

ColorBgra: cover {
	bgr: ColorBgr
	alpha: UInt8
	set: func (color: This) {
		this bgr = color bgr
		this alpha = color alpha
	}
	blue: UInt8 { get { this bgr blue } set (value) { this bgr blue = value } }
	green: UInt8 { get { this bgr green } set (value) { this bgr green = value } }
	red: UInt8 { get { this bgr red } set (value) { this bgr red = value } }
	normalized ::= FloatPoint4D new(this blue as Float / 255, this green as Float / 255, this red as Float / 255, this alpha as Float / 255)
	init: func@ (=bgr, =alpha)
	init: func@ ~default { this init(0, 0, 0, 0) }
	init: func@ ~uint8 (b, g, r, a: UInt8) { this init(ColorBgr new(b, g, r), a) }
	init: func@ ~int (b, g, r, a: Int) { this init(b as UInt8, g as UInt8, r as UInt8, a as UInt8) }
	init: func@ ~float (b, g, r, a: Float) { this init(ColorBgr new(b, g, r), a*255.0f clamp(0.0f, 255.0f) as UInt8) }
	init: func@ ~double (b, g, r, a: Double) { this init(ColorBgr new(b, g, r), a*255.0f clamp(0.0f, 255.0f) as UInt8) }
	copy: func -> This { This new(this bgr, this alpha) }
	toMonochrome: func -> ColorMonochrome { this bgr toMonochrome() }
	toYuv: func -> ColorYuv { this bgr toYuv() }
	toBgr: func -> ColorBgr { this bgr copy() }
	toBgra: func -> This { this copy() }
	blend: func (factor: Float, other: This) -> This {
		This new(this bgr blend(factor, other bgr), (this alpha * (1 - factor) + other alpha * factor) as UInt8)
	}
	distance: func (other: This) -> Float {
		(this bgr distance(other bgr) * 3.0f + (this alpha - other alpha) as Float pow(2)) / 4.0f sqrt()
	}
	equals: func ~monochrome (other: ColorMonochrome) -> Bool { false }
	equals: func ~yuv (other: ColorYuv) -> Bool { false }
	equals: func ~bgr (other: ColorBgr) -> Bool { false }
	equals: func ~bgra (other: This) -> Bool { this bgr equals(other bgr) && this alpha == other alpha }
	operator == (other: ColorMonochrome) -> Bool { this equals(other) }
	operator == (other: ColorYuv) -> Bool { this equals(other) }
	operator == (other: ColorBgr) -> Bool { this equals(other) }
	operator == (other: This) -> Bool { this equals(other) }
	operator != (other: ColorMonochrome) -> Bool { !this equals(other) }
	operator != (other: ColorYuv) -> Bool { !this equals(other) }
	operator != (other: ColorBgr) -> Bool { !this equals(other) }
	operator != (other: This) -> Bool { !this equals(other) }
	svgRGBToString: func -> String {
		result := "rgb(" clone() & this bgr svgRGBToString() & ")" clone()
		result
	}
	svgRGBAlpha: func -> Int {
		result := this alpha
		result
	}
}

ColorConvert: cover {
	fromBgr: static func ~monochrome (action: Func (ColorMonochrome)) -> Func (ColorBgr) {
		func (color: ColorBgr) { action(This bgrToMonochrome(color)) }
	}
	fromBgr: static func ~yuv (action: Func (ColorYuv)) -> Func (ColorBgr) {
		func (color: ColorBgr) { action(This bgrToYuv(color)) }
	}
	fromMonochrome: static func ~bgr (action: Func (ColorBgr)) -> Func (ColorMonochrome) {
		func (color: ColorMonochrome) { action(This monochromeToBgr(color)) }
	}
	fromMonochrome: static func ~yuv (action: Func (ColorYuv)) -> Func (ColorMonochrome) {
		func (color: ColorMonochrome) { action(This monochromeToYuv(color)) }
	}
	fromYuv: static func ~bgr (action: Func (ColorBgr)) -> Func (ColorYuv) {
		func (color: ColorYuv) { action(This yuvToBgr(color)) }
	}
	fromYuv: static func ~monochrome (action: Func (ColorMonochrome)) -> Func (ColorYuv) {
		func (color: ColorYuv) { action(This yuvToMonochrome(color)) }
	}
	// FIXME: yuvToBgr2[512..end] and yuvToBgr2[256..511] are all 0, so there's some minor room for optimization here.
	// Also, since multidimensional arrays work now, the arrays below can be reorganized if so desired.
	monochromeToBgr: static func (color: ColorMonochrome) -> ColorBgr {
		ColorBgr new(
			(This yuvToBgr2[color y] >> 8) clamp(0, 255) as UInt8,
			(This yuvToBgr1[color y] >> 8) clamp(0, 255) as UInt8,
			(This yuvToBgr0[color y] >> 8) clamp(0, 255) as UInt8
		)
	}
	monochromeToYuv: static func (color: ColorMonochrome) -> ColorYuv {
		ColorYuv new(color y, 128, 128)
	}
	bgrToMonochrome: static func (color: ColorBgr) -> ColorMonochrome {
		ColorMonochrome new(
			((This bgrToYuv0[color red] + This bgrToYuv0[256 + color green] + This bgrToYuv0[512 + color blue]) >> 8) clamp (0, 255) as UInt8
		)
	}
	yuvToMonochrome: static func (color: ColorYuv) -> ColorMonochrome {
		ColorMonochrome new(color y)
	}
	yuvToBgr: static func (color: ColorYuv) -> ColorBgr {
		ColorBgr new(
			((This yuvToBgr2[color y] + This yuvToBgr2[256 + color u] + This yuvToBgr2[512 + color v]) >> 8) clamp(0, 255) as UInt8,
			((This yuvToBgr1[color y] + This yuvToBgr1[256 + color u] + This yuvToBgr1[512 + color v]) >> 8) clamp(0, 255) as UInt8,
			((This yuvToBgr0[color y] + This yuvToBgr0[256 + color u] + This yuvToBgr0[512 + color v]) >> 8) clamp(0, 255) as UInt8
		)
	}
	bgrToYuv: static func (color: ColorBgr) -> ColorYuv {
		ColorYuv new(
			((This bgrToYuv0[color red] + This bgrToYuv0[256 + color green] + This bgrToYuv0[512 + color blue]) >> 8) clamp (0, 255) as UInt8,
			(((This bgrToYuv1[color red] + This bgrToYuv1[256 + color green] + This bgrToYuv1[512 + color blue]) >> 8) + 128) clamp(0, 255) as UInt8,
			(((This bgrToYuv2[color red] + This bgrToYuv2[256 + color green] + This bgrToYuv2[512 + color blue]) >> 8) + 128) clamp(0, 255) as UInt8
		)
	}
	yuvToBgr0 := static [ 0, 256, 512, 768, 1024, 1280, 1536, 1792, 2048, 2304, 2560, 2816, 3072, 3328, 3584, 3840, 4096, 4352, 4608, 4864, 5120, 5376, 5632, 5888, 6144, 6400, 6656, 6912, 7168, 7424, 7680, 7936, 8192, 8448, 8704, 8960, 9216, 9472, 9728, 9984, 10240, 10496, 10752, 11008, 11264, 11520, 11776, 12032, 12288, 12544, 12800, 13056, 13312, 13568, 13824, 14080, 14336, 14592, 14848, 15104, 15360, 15616, 15872, 16128, 16384, 16640, 16896, 17152, 17408, 17664, 17920, 18176, 18432, 18688, 18944, 19200, 19456, 19712, 19968, 20224, 20480, 20736, 20992, 21248, 21504, 21760, 22016, 22272, 22528, 22784, 23040, 23296, 23552, 23808, 24064, 24320, 24576, 24832, 25088, 25344, 25600, 25856, 26112, 26368, 26624, 26880, 27136, 27392, 27648, 27904, 28160, 28416, 28672, 28928, 29184, 29440, 29696, 29952, 30208, 30464, 30720, 30976, 31232, 31488, 31744, 32000, 32256, 32512, 32768, 33024, 33280, 33536, 33792, 34048, 34304, 34560, 34816, 35072, 35328, 35584, 35840, 36096, 36352, 36608, 36864, 37120, 37376, 37632, 37888, 38144, 38400, 38656, 38912, 39168, 39424, 39680, 39936, 40192, 40448, 40704, 40960, 41216, 41472, 41728, 41984, 42240, 42496, 42752, 43008, 43264, 43520, 43776, 44032, 44288, 44544, 44800, 45056, 45312, 45568, 45824, 46080, 46336, 46592, 46848, 47104, 47360, 47616, 47872, 48128, 48384, 48640, 48896, 49152, 49408, 49664, 49920, 50176, 50432, 50688, 50944, 51200, 51456, 51712, 51968, 52224, 52480, 52736, 52992, 53248, 53504, 53760, 54016, 54272, 54528, 54784, 55040, 55296, 55552, 55808, 56064, 56320, 56576, 56832, 57088, 57344, 57600, 57856, 58112, 58368, 58624, 58880, 59136, 59392, 59648, 59904, 60160, 60416, 60672, 60928, 61184, 61440, 61696, 61952, 62208, 62464, 62720, 62976, 63232, 63488, 63744, 64000, 64256, 64512, 64768, 65024, 65280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45824, -45466, -45108, -44750, -44392, -44034, -43676, -43318, -42960, -42602, -42244, -41886, -41528, -41170, -40812, -40454, -40096, -39738, -39380, -39022, -38664, -38306, -37948, -37590, -37232, -36874, -36516, -36158, -35800, -35442, -35084, -34726, -34368, -34010, -33652, -33294, -32936, -32578, -32220, -31862, -31504, -31146, -30788, -30430, -30072, -29714, -29356, -28998, -28640, -28282, -27924, -27566, -27208, -26850, -26492, -26134, -25776, -25418, -25060, -24702, -24344, -23986, -23628, -23270, -22912, -22554, -22196, -21838, -21480, -21122, -20764, -20406, -20048, -19690, -19332, -18974, -18616, -18258, -17900, -17542, -17184, -16826, -16468, -16110, -15752, -15394, -15036, -14678, -14320, -13962, -13604, -13246, -12888, -12530, -12172, -11814, -11456, -11098, -10740, -10382, -10024, -9666, -9308, -8950, -8592, -8234, -7876, -7518, -7160, -6802, -6444, -6086, -5728, -5370, -5012, -4654, -4296, -3938, -3580, -3222, -2864, -2506, -2148, -1790, -1432, -1074, -716, -358, 0, 358, 716, 1074, 1432, 1790, 2148, 2506, 2864, 3222, 3580, 3938, 4296, 4654, 5012, 5370, 5728, 6086, 6444, 6802, 7160, 7518, 7876, 8234, 8592, 8950, 9308, 9666, 10024, 10382, 10740, 11098, 11456, 11814, 12172, 12530, 12888, 13246, 13604, 13962, 14320, 14678, 15036, 15394, 15752, 16110, 16468, 16826, 17184, 17542, 17900, 18258, 18616, 18974, 19332, 19690, 20048, 20406, 20764, 21122, 21480, 21838, 22196, 22554, 22912, 23270, 23628, 23986, 24344, 24702, 25060, 25418, 25776, 26134, 26492, 26850, 27208, 27566, 27924, 28282, 28640, 28998, 29356, 29714, 30072, 30430, 30788, 31146, 31504, 31862, 32220, 32578, 32936, 33294, 33652, 34010, 34368, 34726, 35084, 35442, 35800, 36158, 36516, 36874, 37232, 37590, 37948, 38306, 38664, 39022, 39380, 39738, 40096, 40454, 40812, 41170, 41528, 41886, 42244, 42602, 42960, 43318, 43676, 44034, 44392, 44750, 45108, 45466 ]
	yuvToBgr1 := static [ 0, 256, 512, 768, 1024, 1280, 1536, 1792, 2048, 2304, 2560, 2816, 3072, 3328, 3584, 3840, 4096, 4352, 4608, 4864, 5120, 5376, 5632, 5888, 6144, 6400, 6656, 6912, 7168, 7424, 7680, 7936, 8192, 8448, 8704, 8960, 9216, 9472, 9728, 9984, 10240, 10496, 10752, 11008, 11264, 11520, 11776, 12032, 12288, 12544, 12800, 13056, 13312, 13568, 13824, 14080, 14336, 14592, 14848, 15104, 15360, 15616, 15872, 16128, 16384, 16640, 16896, 17152, 17408, 17664, 17920, 18176, 18432, 18688, 18944, 19200, 19456, 19712, 19968, 20224, 20480, 20736, 20992, 21248, 21504, 21760, 22016, 22272, 22528, 22784, 23040, 23296, 23552, 23808, 24064, 24320, 24576, 24832, 25088, 25344, 25600, 25856, 26112, 26368, 26624, 26880, 27136, 27392, 27648, 27904, 28160, 28416, 28672, 28928, 29184, 29440, 29696, 29952, 30208, 30464, 30720, 30976, 31232, 31488, 31744, 32000, 32256, 32512, 32768, 33024, 33280, 33536, 33792, 34048, 34304, 34560, 34816, 35072, 35328, 35584, 35840, 36096, 36352, 36608, 36864, 37120, 37376, 37632, 37888, 38144, 38400, 38656, 38912, 39168, 39424, 39680, 39936, 40192, 40448, 40704, 40960, 41216, 41472, 41728, 41984, 42240, 42496, 42752, 43008, 43264, 43520, 43776, 44032, 44288, 44544, 44800, 45056, 45312, 45568, 45824, 46080, 46336, 46592, 46848, 47104, 47360, 47616, 47872, 48128, 48384, 48640, 48896, 49152, 49408, 49664, 49920, 50176, 50432, 50688, 50944, 51200, 51456, 51712, 51968, 52224, 52480, 52736, 52992, 53248, 53504, 53760, 54016, 54272, 54528, 54784, 55040, 55296, 55552, 55808, 56064, 56320, 56576, 56832, 57088, 57344, 57600, 57856, 58112, 58368, 58624, 58880, 59136, 59392, 59648, 59904, 60160, 60416, 60672, 60928, 61184, 61440, 61696, 61952, 62208, 62464, 62720, 62976, 63232, 63488, 63744, 64000, 64256, 64512, 64768, 65024, 65280, 11264, 11176, 11088, 11000, 10912, 10824, 10736, 10648, 10560, 10472, 10384, 10296, 10208, 10120, 10032, 9944, 9856, 9768, 9680, 9592, 9504, 9416, 9328, 9240, 9152, 9064, 8976, 8888, 8800, 8712, 8624, 8536, 8448, 8360, 8272, 8184, 8096, 8008, 7920, 7832, 7744, 7656, 7568, 7480, 7392, 7304, 7216, 7128, 7040, 6952, 6864, 6776, 6688, 6600, 6512, 6424, 6336, 6248, 6160, 6072, 5984, 5896, 5808, 5720, 5632, 5544, 5456, 5368, 5280, 5192, 5104, 5016, 4928, 4840, 4752, 4664, 4576, 4488, 4400, 4312, 4224, 4136, 4048, 3960, 3872, 3784, 3696, 3608, 3520, 3432, 3344, 3256, 3168, 3080, 2992, 2904, 2816, 2728, 2640, 2552, 2464, 2376, 2288, 2200, 2112, 2024, 1936, 1848, 1760, 1672, 1584, 1496, 1408, 1320, 1232, 1144, 1056, 968, 880, 792, 704, 616, 528, 440, 352, 264, 176, 88, 0, -88, -176, -264, -352, -440, -528, -616, -704, -792, -880, -968, -1056, -1144, -1232, -1320, -1408, -1496, -1584, -1672, -1760, -1848, -1936, -2024, -2112, -2200, -2288, -2376, -2464, -2552, -2640, -2728, -2816, -2904, -2992, -3080, -3168, -3256, -3344, -3432, -3520, -3608, -3696, -3784, -3872, -3960, -4048, -4136, -4224, -4312, -4400, -4488, -4576, -4664, -4752, -4840, -4928, -5016, -5104, -5192, -5280, -5368, -5456, -5544, -5632, -5720, -5808, -5896, -5984, -6072, -6160, -6248, -6336, -6424, -6512, -6600, -6688, -6776, -6864, -6952, -7040, -7128, -7216, -7304, -7392, -7480, -7568, -7656, -7744, -7832, -7920, -8008, -8096, -8184, -8272, -8360, -8448, -8536, -8624, -8712, -8800, -8888, -8976, -9064, -9152, -9240, -9328, -9416, -9504, -9592, -9680, -9768, -9856, -9944, -10032, -10120, -10208, -10296, -10384, -10472, -10560, -10648, -10736, -10824, -10912, -11000, -11088, -11176, 23296, 23114, 22932, 22750, 22568, 22386, 22204, 22022, 21840, 21658, 21476, 21294, 21112, 20930, 20748, 20566, 20384, 20202, 20020, 19838, 19656, 19474, 19292, 19110, 18928, 18746, 18564, 18382, 18200, 18018, 17836, 17654, 17472, 17290, 17108, 16926, 16744, 16562, 16380, 16198, 16016, 15834, 15652, 15470, 15288, 15106, 14924, 14742, 14560, 14378, 14196, 14014, 13832, 13650, 13468, 13286, 13104, 12922, 12740, 12558, 12376, 12194, 12012, 11830, 11648, 11466, 11284, 11102, 10920, 10738, 10556, 10374, 10192, 10010, 9828, 9646, 9464, 9282, 9100, 8918, 8736, 8554, 8372, 8190, 8008, 7826, 7644, 7462, 7280, 7098, 6916, 6734, 6552, 6370, 6188, 6006, 5824, 5642, 5460, 5278, 5096, 4914, 4732, 4550, 4368, 4186, 4004, 3822, 3640, 3458, 3276, 3094, 2912, 2730, 2548, 2366, 2184, 2002, 1820, 1638, 1456, 1274, 1092, 910, 728, 546, 364, 182, 0, -182, -364, -546, -728, -910, -1092, -1274, -1456, -1638, -1820, -2002, -2184, -2366, -2548, -2730, -2912, -3094, -3276, -3458, -3640, -3822, -4004, -4186, -4368, -4550, -4732, -4914, -5096, -5278, -5460, -5642, -5824, -6006, -6188, -6370, -6552, -6734, -6916, -7098, -7280, -7462, -7644, -7826, -8008, -8190, -8372, -8554, -8736, -8918, -9100, -9282, -9464, -9646, -9828, -10010, -10192, -10374, -10556, -10738, -10920, -11102, -11284, -11466, -11648, -11830, -12012, -12194, -12376, -12558, -12740, -12922, -13104, -13286, -13468, -13650, -13832, -14014, -14196, -14378, -14560, -14742, -14924, -15106, -15288, -15470, -15652, -15834, -16016, -16198, -16380, -16562, -16744, -16926, -17108, -17290, -17472, -17654, -17836, -18018, -18200, -18382, -18564, -18746, -18928, -19110, -19292, -19474, -19656, -19838, -20020, -20202, -20384, -20566, -20748, -20930, -21112, -21294, -21476, -21658, -21840, -22022, -22204, -22386, -22568, -22750, -22932, -23114 ]
	yuvToBgr2 := static [ 0, 256, 512, 768, 1024, 1280, 1536, 1792, 2048, 2304, 2560, 2816, 3072, 3328, 3584, 3840, 4096, 4352, 4608, 4864, 5120, 5376, 5632, 5888, 6144, 6400, 6656, 6912, 7168, 7424, 7680, 7936, 8192, 8448, 8704, 8960, 9216, 9472, 9728, 9984, 10240, 10496, 10752, 11008, 11264, 11520, 11776, 12032, 12288, 12544, 12800, 13056, 13312, 13568, 13824, 14080, 14336, 14592, 14848, 15104, 15360, 15616, 15872, 16128, 16384, 16640, 16896, 17152, 17408, 17664, 17920, 18176, 18432, 18688, 18944, 19200, 19456, 19712, 19968, 20224, 20480, 20736, 20992, 21248, 21504, 21760, 22016, 22272, 22528, 22784, 23040, 23296, 23552, 23808, 24064, 24320, 24576, 24832, 25088, 25344, 25600, 25856, 26112, 26368, 26624, 26880, 27136, 27392, 27648, 27904, 28160, 28416, 28672, 28928, 29184, 29440, 29696, 29952, 30208, 30464, 30720, 30976, 31232, 31488, 31744, 32000, 32256, 32512, 32768, 33024, 33280, 33536, 33792, 34048, 34304, 34560, 34816, 35072, 35328, 35584, 35840, 36096, 36352, 36608, 36864, 37120, 37376, 37632, 37888, 38144, 38400, 38656, 38912, 39168, 39424, 39680, 39936, 40192, 40448, 40704, 40960, 41216, 41472, 41728, 41984, 42240, 42496, 42752, 43008, 43264, 43520, 43776, 44032, 44288, 44544, 44800, 45056, 45312, 45568, 45824, 46080, 46336, 46592, 46848, 47104, 47360, 47616, 47872, 48128, 48384, 48640, 48896, 49152, 49408, 49664, 49920, 50176, 50432, 50688, 50944, 51200, 51456, 51712, 51968, 52224, 52480, 52736, 52992, 53248, 53504, 53760, 54016, 54272, 54528, 54784, 55040, 55296, 55552, 55808, 56064, 56320, 56576, 56832, 57088, 57344, 57600, 57856, 58112, 58368, 58624, 58880, 59136, 59392, 59648, 59904, 60160, 60416, 60672, 60928, 61184, 61440, 61696, 61952, 62208, 62464, 62720, 62976, 63232, 63488, 63744, 64000, 64256, 64512, 64768, 65024, 65280, -57984, -57531, -57078, -56625, -56172, -55719, -55266, -54813, -54360, -53907, -53454, -53001, -52548, -52095, -51642, -51189, -50736, -50283, -49830, -49377, -48924, -48471, -48018, -47565, -47112, -46659, -46206, -45753, -45300, -44847, -44394, -43941, -43488, -43035, -42582, -42129, -41676, -41223, -40770, -40317, -39864, -39411, -38958, -38505, -38052, -37599, -37146, -36693, -36240, -35787, -35334, -34881, -34428, -33975, -33522, -33069, -32616, -32163, -31710, -31257, -30804, -30351, -29898, -29445, -28992, -28539, -28086, -27633, -27180, -26727, -26274, -25821, -25368, -24915, -24462, -24009, -23556, -23103, -22650, -22197, -21744, -21291, -20838, -20385, -19932, -19479, -19026, -18573, -18120, -17667, -17214, -16761, -16308, -15855, -15402, -14949, -14496, -14043, -13590, -13137, -12684, -12231, -11778, -11325, -10872, -10419, -9966, -9513, -9060, -8607, -8154, -7701, -7248, -6795, -6342, -5889, -5436, -4983, -4530, -4077, -3624, -3171, -2718, -2265, -1812, -1359, -906, -453, 0, 453, 906, 1359, 1812, 2265, 2718, 3171, 3624, 4077, 4530, 4983, 5436, 5889, 6342, 6795, 7248, 7701, 8154, 8607, 9060, 9513, 9966, 10419, 10872, 11325, 11778, 12231, 12684, 13137, 13590, 14043, 14496, 14949, 15402, 15855, 16308, 16761, 17214, 17667, 18120, 18573, 19026, 19479, 19932, 20385, 20838, 21291, 21744, 22197, 22650, 23103, 23556, 24009, 24462, 24915, 25368, 25821, 26274, 26727, 27180, 27633, 28086, 28539, 28992, 29445, 29898, 30351, 30804, 31257, 31710, 32163, 32616, 33069, 33522, 33975, 34428, 34881, 35334, 35787, 36240, 36693, 37146, 37599, 38052, 38505, 38958, 39411, 39864, 40317, 40770, 41223, 41676, 42129, 42582, 43035, 43488, 43941, 44394, 44847, 45300, 45753, 46206, 46659, 47112, 47565, 48018, 48471, 48924, 49377, 49830, 50283, 50736, 51189, 51642, 52095, 52548, 53001, 53454, 53907, 54360, 54813, 55266, 55719, 56172, 56625, 57078, 57531, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
	bgrToYuv0 := static [ 0, 76, 152, 228, 304, 380, 456, 532, 608, 684, 760, 836, 912, 988, 1064, 1140, 1216, 1292, 1368, 1444, 1520, 1596, 1672, 1748, 1824, 1900, 1976, 2052, 2128, 2204, 2280, 2356, 2432, 2508, 2584, 2660, 2736, 2812, 2888, 2964, 3040, 3116, 3192, 3268, 3344, 3420, 3496, 3572, 3648, 3724, 3800, 3876, 3952, 4028, 4104, 4180, 4256, 4332, 4408, 4484, 4560, 4636, 4712, 4788, 4864, 4940, 5016, 5092, 5168, 5244, 5320, 5396, 5472, 5548, 5624, 5700, 5776, 5852, 5928, 6004, 6080, 6156, 6232, 6308, 6384, 6460, 6536, 6612, 6688, 6764, 6840, 6916, 6992, 7068, 7144, 7220, 7296, 7372, 7448, 7524, 7600, 7676, 7752, 7828, 7904, 7980, 8056, 8132, 8208, 8284, 8360, 8436, 8512, 8588, 8664, 8740, 8816, 8892, 8968, 9044, 9120, 9196, 9272, 9348, 9424, 9500, 9576, 9652, 9728, 9804, 9880, 9956, 10032, 10108, 10184, 10260, 10336, 10412, 10488, 10564, 10640, 10716, 10792, 10868, 10944, 11020, 11096, 11172, 11248, 11324, 11400, 11476, 11552, 11628, 11704, 11780, 11856, 11932, 12008, 12084, 12160, 12236, 12312, 12388, 12464, 12540, 12616, 12692, 12768, 12844, 12920, 12996, 13072, 13148, 13224, 13300, 13376, 13452, 13528, 13604, 13680, 13756, 13832, 13908, 13984, 14060, 14136, 14212, 14288, 14364, 14440, 14516, 14592, 14668, 14744, 14820, 14896, 14972, 15048, 15124, 15200, 15276, 15352, 15428, 15504, 15580, 15656, 15732, 15808, 15884, 15960, 16036, 16112, 16188, 16264, 16340, 16416, 16492, 16568, 16644, 16720, 16796, 16872, 16948, 17024, 17100, 17176, 17252, 17328, 17404, 17480, 17556, 17632, 17708, 17784, 17860, 17936, 18012, 18088, 18164, 18240, 18316, 18392, 18468, 18544, 18620, 18696, 18772, 18848, 18924, 19000, 19076, 19152, 19228, 19304, 19380, 0, 150, 300, 450, 600, 750, 900, 1050, 1200, 1350, 1500, 1650, 1800, 1950, 2100, 2250, 2400, 2550, 2700, 2850, 3000, 3150, 3300, 3450, 3600, 3750, 3900, 4050, 4200, 4350, 4500, 4650, 4800, 4950, 5100, 5250, 5400, 5550, 5700, 5850, 6000, 6150, 6300, 6450, 6600, 6750, 6900, 7050, 7200, 7350, 7500, 7650, 7800, 7950, 8100, 8250, 8400, 8550, 8700, 8850, 9000, 9150, 9300, 9450, 9600, 9750, 9900, 10050, 10200, 10350, 10500, 10650, 10800, 10950, 11100, 11250, 11400, 11550, 11700, 11850, 12000, 12150, 12300, 12450, 12600, 12750, 12900, 13050, 13200, 13350, 13500, 13650, 13800, 13950, 14100, 14250, 14400, 14550, 14700, 14850, 15000, 15150, 15300, 15450, 15600, 15750, 15900, 16050, 16200, 16350, 16500, 16650, 16800, 16950, 17100, 17250, 17400, 17550, 17700, 17850, 18000, 18150, 18300, 18450, 18600, 18750, 18900, 19050, 19200, 19350, 19500, 19650, 19800, 19950, 20100, 20250, 20400, 20550, 20700, 20850, 21000, 21150, 21300, 21450, 21600, 21750, 21900, 22050, 22200, 22350, 22500, 22650, 22800, 22950, 23100, 23250, 23400, 23550, 23700, 23850, 24000, 24150, 24300, 24450, 24600, 24750, 24900, 25050, 25200, 25350, 25500, 25650, 25800, 25950, 26100, 26250, 26400, 26550, 26700, 26850, 27000, 27150, 27300, 27450, 27600, 27750, 27900, 28050, 28200, 28350, 28500, 28650, 28800, 28950, 29100, 29250, 29400, 29550, 29700, 29850, 30000, 30150, 30300, 30450, 30600, 30750, 30900, 31050, 31200, 31350, 31500, 31650, 31800, 31950, 32100, 32250, 32400, 32550, 32700, 32850, 33000, 33150, 33300, 33450, 33600, 33750, 33900, 34050, 34200, 34350, 34500, 34650, 34800, 34950, 35100, 35250, 35400, 35550, 35700, 35850, 36000, 36150, 36300, 36450, 36600, 36750, 36900, 37050, 37200, 37350, 37500, 37650, 37800, 37950, 38100, 38250, 0, 29, 58, 87, 116, 145, 174, 203, 232, 261, 290, 319, 348, 377, 406, 435, 464, 493, 522, 551, 580, 609, 638, 667, 696, 725, 754, 783, 812, 841, 870, 899, 928, 957, 986, 1015, 1044, 1073, 1102, 1131, 1160, 1189, 1218, 1247, 1276, 1305, 1334, 1363, 1392, 1421, 1450, 1479, 1508, 1537, 1566, 1595, 1624, 1653, 1682, 1711, 1740, 1769, 1798, 1827, 1856, 1885, 1914, 1943, 1972, 2001, 2030, 2059, 2088, 2117, 2146, 2175, 2204, 2233, 2262, 2291, 2320, 2349, 2378, 2407, 2436, 2465, 2494, 2523, 2552, 2581, 2610, 2639, 2668, 2697, 2726, 2755, 2784, 2813, 2842, 2871, 2900, 2929, 2958, 2987, 3016, 3045, 3074, 3103, 3132, 3161, 3190, 3219, 3248, 3277, 3306, 3335, 3364, 3393, 3422, 3451, 3480, 3509, 3538, 3567, 3596, 3625, 3654, 3683, 3712, 3741, 3770, 3799, 3828, 3857, 3886, 3915, 3944, 3973, 4002, 4031, 4060, 4089, 4118, 4147, 4176, 4205, 4234, 4263, 4292, 4321, 4350, 4379, 4408, 4437, 4466, 4495, 4524, 4553, 4582, 4611, 4640, 4669, 4698, 4727, 4756, 4785, 4814, 4843, 4872, 4901, 4930, 4959, 4988, 5017, 5046, 5075, 5104, 5133, 5162, 5191, 5220, 5249, 5278, 5307, 5336, 5365, 5394, 5423, 5452, 5481, 5510, 5539, 5568, 5597, 5626, 5655, 5684, 5713, 5742, 5771, 5800, 5829, 5858, 5887, 5916, 5945, 5974, 6003, 6032, 6061, 6090, 6119, 6148, 6177, 6206, 6235, 6264, 6293, 6322, 6351, 6380, 6409, 6438, 6467, 6496, 6525, 6554, 6583, 6612, 6641, 6670, 6699, 6728, 6757, 6786, 6815, 6844, 6873, 6902, 6931, 6960, 6989, 7018, 7047, 7076, 7105, 7134, 7163, 7192, 7221, 7250, 7279, 7308, 7337, 7366, 7395 ]
	bgrToYuv1 := static [ 0, -43, -86, -129, -172, -215, -258, -301, -344, -387, -430, -473, -516, -559, -602, -645, -688, -731, -774, -817, -860, -903, -946, -989, -1032, -1075, -1118, -1161, -1204, -1247, -1290, -1333, -1376, -1419, -1462, -1505, -1548, -1591, -1634, -1677, -1720, -1763, -1806, -1849, -1892, -1935, -1978, -2021, -2064, -2107, -2150, -2193, -2236, -2279, -2322, -2365, -2408, -2451, -2494, -2537, -2580, -2623, -2666, -2709, -2752, -2795, -2838, -2881, -2924, -2967, -3010, -3053, -3096, -3139, -3182, -3225, -3268, -3311, -3354, -3397, -3440, -3483, -3526, -3569, -3612, -3655, -3698, -3741, -3784, -3827, -3870, -3913, -3956, -3999, -4042, -4085, -4128, -4171, -4214, -4257, -4300, -4343, -4386, -4429, -4472, -4515, -4558, -4601, -4644, -4687, -4730, -4773, -4816, -4859, -4902, -4945, -4988, -5031, -5074, -5117, -5160, -5203, -5246, -5289, -5332, -5375, -5418, -5461, -5504, -5547, -5590, -5633, -5676, -5719, -5762, -5805, -5848, -5891, -5934, -5977, -6020, -6063, -6106, -6149, -6192, -6235, -6278, -6321, -6364, -6407, -6450, -6493, -6536, -6579, -6622, -6665, -6708, -6751, -6794, -6837, -6880, -6923, -6966, -7009, -7052, -7095, -7138, -7181, -7224, -7267, -7310, -7353, -7396, -7439, -7482, -7525, -7568, -7611, -7654, -7697, -7740, -7783, -7826, -7869, -7912, -7955, -7998, -8041, -8084, -8127, -8170, -8213, -8256, -8299, -8342, -8385, -8428, -8471, -8514, -8557, -8600, -8643, -8686, -8729, -8772, -8815, -8858, -8901, -8944, -8987, -9030, -9073, -9116, -9159, -9202, -9245, -9288, -9331, -9374, -9417, -9460, -9503, -9546, -9589, -9632, -9675, -9718, -9761, -9804, -9847, -9890, -9933, -9976, -10019, -10062, -10105, -10148, -10191, -10234, -10277, -10320, -10363, -10406, -10449, -10492, -10535, -10578, -10621, -10664, -10707, -10750, -10793, -10836, -10879, -10922, -10965, 0, -85, -170, -255, -340, -425, -510, -595, -680, -765, -850, -935, -1020, -1105, -1190, -1275, -1360, -1445, -1530, -1615, -1700, -1785, -1870, -1955, -2040, -2125, -2210, -2295, -2380, -2465, -2550, -2635, -2720, -2805, -2890, -2975, -3060, -3145, -3230, -3315, -3400, -3485, -3570, -3655, -3740, -3825, -3910, -3995, -4080, -4165, -4250, -4335, -4420, -4505, -4590, -4675, -4760, -4845, -4930, -5015, -5100, -5185, -5270, -5355, -5440, -5525, -5610, -5695, -5780, -5865, -5950, -6035, -6120, -6205, -6290, -6375, -6460, -6545, -6630, -6715, -6800, -6885, -6970, -7055, -7140, -7225, -7310, -7395, -7480, -7565, -7650, -7735, -7820, -7905, -7990, -8075, -8160, -8245, -8330, -8415, -8500, -8585, -8670, -8755, -8840, -8925, -9010, -9095, -9180, -9265, -9350, -9435, -9520, -9605, -9690, -9775, -9860, -9945, -10030, -10115, -10200, -10285, -10370, -10455, -10540, -10625, -10710, -10795, -10880, -10965, -11050, -11135, -11220, -11305, -11390, -11475, -11560, -11645, -11730, -11815, -11900, -11985, -12070, -12155, -12240, -12325, -12410, -12495, -12580, -12665, -12750, -12835, -12920, -13005, -13090, -13175, -13260, -13345, -13430, -13515, -13600, -13685, -13770, -13855, -13940, -14025, -14110, -14195, -14280, -14365, -14450, -14535, -14620, -14705, -14790, -14875, -14960, -15045, -15130, -15215, -15300, -15385, -15470, -15555, -15640, -15725, -15810, -15895, -15980, -16065, -16150, -16235, -16320, -16405, -16490, -16575, -16660, -16745, -16830, -16915, -17000, -17085, -17170, -17255, -17340, -17425, -17510, -17595, -17680, -17765, -17850, -17935, -18020, -18105, -18190, -18275, -18360, -18445, -18530, -18615, -18700, -18785, -18870, -18955, -19040, -19125, -19210, -19295, -19380, -19465, -19550, -19635, -19720, -19805, -19890, -19975, -20060, -20145, -20230, -20315, -20400, -20485, -20570, -20655, -20740, -20825, -20910, -20995, -21080, -21165, -21250, -21335, -21420, -21505, -21590, -21675, 0, 128, 256, 384, 512, 640, 768, 896, 1024, 1152, 1280, 1408, 1536, 1664, 1792, 1920, 2048, 2176, 2304, 2432, 2560, 2688, 2816, 2944, 3072, 3200, 3328, 3456, 3584, 3712, 3840, 3968, 4096, 4224, 4352, 4480, 4608, 4736, 4864, 4992, 5120, 5248, 5376, 5504, 5632, 5760, 5888, 6016, 6144, 6272, 6400, 6528, 6656, 6784, 6912, 7040, 7168, 7296, 7424, 7552, 7680, 7808, 7936, 8064, 8192, 8320, 8448, 8576, 8704, 8832, 8960, 9088, 9216, 9344, 9472, 9600, 9728, 9856, 9984, 10112, 10240, 10368, 10496, 10624, 10752, 10880, 11008, 11136, 11264, 11392, 11520, 11648, 11776, 11904, 12032, 12160, 12288, 12416, 12544, 12672, 12800, 12928, 13056, 13184, 13312, 13440, 13568, 13696, 13824, 13952, 14080, 14208, 14336, 14464, 14592, 14720, 14848, 14976, 15104, 15232, 15360, 15488, 15616, 15744, 15872, 16000, 16128, 16256, 16384, 16512, 16640, 16768, 16896, 17024, 17152, 17280, 17408, 17536, 17664, 17792, 17920, 18048, 18176, 18304, 18432, 18560, 18688, 18816, 18944, 19072, 19200, 19328, 19456, 19584, 19712, 19840, 19968, 20096, 20224, 20352, 20480, 20608, 20736, 20864, 20992, 21120, 21248, 21376, 21504, 21632, 21760, 21888, 22016, 22144, 22272, 22400, 22528, 22656, 22784, 22912, 23040, 23168, 23296, 23424, 23552, 23680, 23808, 23936, 24064, 24192, 24320, 24448, 24576, 24704, 24832, 24960, 25088, 25216, 25344, 25472, 25600, 25728, 25856, 25984, 26112, 26240, 26368, 26496, 26624, 26752, 26880, 27008, 27136, 27264, 27392, 27520, 27648, 27776, 27904, 28032, 28160, 28288, 28416, 28544, 28672, 28800, 28928, 29056, 29184, 29312, 29440, 29568, 29696, 29824, 29952, 30080, 30208, 30336, 30464, 30592, 30720, 30848, 30976, 31104, 31232, 31360, 31488, 31616, 31744, 31872, 32000, 32128, 32256, 32384, 32512, 32640 ]
	bgrToYuv2 := static [ 0, 128, 256, 384, 512, 640, 768, 896, 1024, 1152, 1280, 1408, 1536, 1664, 1792, 1920, 2048, 2176, 2304, 2432, 2560, 2688, 2816, 2944, 3072, 3200, 3328, 3456, 3584, 3712, 3840, 3968, 4096, 4224, 4352, 4480, 4608, 4736, 4864, 4992, 5120, 5248, 5376, 5504, 5632, 5760, 5888, 6016, 6144, 6272, 6400, 6528, 6656, 6784, 6912, 7040, 7168, 7296, 7424, 7552, 7680, 7808, 7936, 8064, 8192, 8320, 8448, 8576, 8704, 8832, 8960, 9088, 9216, 9344, 9472, 9600, 9728, 9856, 9984, 10112, 10240, 10368, 10496, 10624, 10752, 10880, 11008, 11136, 11264, 11392, 11520, 11648, 11776, 11904, 12032, 12160, 12288, 12416, 12544, 12672, 12800, 12928, 13056, 13184, 13312, 13440, 13568, 13696, 13824, 13952, 14080, 14208, 14336, 14464, 14592, 14720, 14848, 14976, 15104, 15232, 15360, 15488, 15616, 15744, 15872, 16000, 16128, 16256, 16384, 16512, 16640, 16768, 16896, 17024, 17152, 17280, 17408, 17536, 17664, 17792, 17920, 18048, 18176, 18304, 18432, 18560, 18688, 18816, 18944, 19072, 19200, 19328, 19456, 19584, 19712, 19840, 19968, 20096, 20224, 20352, 20480, 20608, 20736, 20864, 20992, 21120, 21248, 21376, 21504, 21632, 21760, 21888, 22016, 22144, 22272, 22400, 22528, 22656, 22784, 22912, 23040, 23168, 23296, 23424, 23552, 23680, 23808, 23936, 24064, 24192, 24320, 24448, 24576, 24704, 24832, 24960, 25088, 25216, 25344, 25472, 25600, 25728, 25856, 25984, 26112, 26240, 26368, 26496, 26624, 26752, 26880, 27008, 27136, 27264, 27392, 27520, 27648, 27776, 27904, 28032, 28160, 28288, 28416, 28544, 28672, 28800, 28928, 29056, 29184, 29312, 29440, 29568, 29696, 29824, 29952, 30080, 30208, 30336, 30464, 30592, 30720, 30848, 30976, 31104, 31232, 31360, 31488, 31616, 31744, 31872, 32000, 32128, 32256, 32384, 32512, 32640, 0, -107, -214, -321, -428, -535, -642, -749, -856, -963, -1070, -1177, -1284, -1391, -1498, -1605, -1712, -1819, -1926, -2033, -2140, -2247, -2354, -2461, -2568, -2675, -2782, -2889, -2996, -3103, -3210, -3317, -3424, -3531, -3638, -3745, -3852, -3959, -4066, -4173, -4280, -4387, -4494, -4601, -4708, -4815, -4922, -5029, -5136, -5243, -5350, -5457, -5564, -5671, -5778, -5885, -5992, -6099, -6206, -6313, -6420, -6527, -6634, -6741, -6848, -6955, -7062, -7169, -7276, -7383, -7490, -7597, -7704, -7811, -7918, -8025, -8132, -8239, -8346, -8453, -8560, -8667, -8774, -8881, -8988, -9095, -9202, -9309, -9416, -9523, -9630, -9737, -9844, -9951, -10058, -10165, -10272, -10379, -10486, -10593, -10700, -10807, -10914, -11021, -11128, -11235, -11342, -11449, -11556, -11663, -11770, -11877, -11984, -12091, -12198, -12305, -12412, -12519, -12626, -12733, -12840, -12947, -13054, -13161, -13268, -13375, -13482, -13589, -13696, -13803, -13910, -14017, -14124, -14231, -14338, -14445, -14552, -14659, -14766, -14873, -14980, -15087, -15194, -15301, -15408, -15515, -15622, -15729, -15836, -15943, -16050, -16157, -16264, -16371, -16478, -16585, -16692, -16799, -16906, -17013, -17120, -17227, -17334, -17441, -17548, -17655, -17762, -17869, -17976, -18083, -18190, -18297, -18404, -18511, -18618, -18725, -18832, -18939, -19046, -19153, -19260, -19367, -19474, -19581, -19688, -19795, -19902, -20009, -20116, -20223, -20330, -20437, -20544, -20651, -20758, -20865, -20972, -21079, -21186, -21293, -21400, -21507, -21614, -21721, -21828, -21935, -22042, -22149, -22256, -22363, -22470, -22577, -22684, -22791, -22898, -23005, -23112, -23219, -23326, -23433, -23540, -23647, -23754, -23861, -23968, -24075, -24182, -24289, -24396, -24503, -24610, -24717, -24824, -24931, -25038, -25145, -25252, -25359, -25466, -25573, -25680, -25787, -25894, -26001, -26108, -26215, -26322, -26429, -26536, -26643, -26750, -26857, -26964, -27071, -27178, -27285, 0, -21, -42, -63, -84, -105, -126, -147, -168, -189, -210, -231, -252, -273, -294, -315, -336, -357, -378, -399, -420, -441, -462, -483, -504, -525, -546, -567, -588, -609, -630, -651, -672, -693, -714, -735, -756, -777, -798, -819, -840, -861, -882, -903, -924, -945, -966, -987, -1008, -1029, -1050, -1071, -1092, -1113, -1134, -1155, -1176, -1197, -1218, -1239, -1260, -1281, -1302, -1323, -1344, -1365, -1386, -1407, -1428, -1449, -1470, -1491, -1512, -1533, -1554, -1575, -1596, -1617, -1638, -1659, -1680, -1701, -1722, -1743, -1764, -1785, -1806, -1827, -1848, -1869, -1890, -1911, -1932, -1953, -1974, -1995, -2016, -2037, -2058, -2079, -2100, -2121, -2142, -2163, -2184, -2205, -2226, -2247, -2268, -2289, -2310, -2331, -2352, -2373, -2394, -2415, -2436, -2457, -2478, -2499, -2520, -2541, -2562, -2583, -2604, -2625, -2646, -2667, -2688, -2709, -2730, -2751, -2772, -2793, -2814, -2835, -2856, -2877, -2898, -2919, -2940, -2961, -2982, -3003, -3024, -3045, -3066, -3087, -3108, -3129, -3150, -3171, -3192, -3213, -3234, -3255, -3276, -3297, -3318, -3339, -3360, -3381, -3402, -3423, -3444, -3465, -3486, -3507, -3528, -3549, -3570, -3591, -3612, -3633, -3654, -3675, -3696, -3717, -3738, -3759, -3780, -3801, -3822, -3843, -3864, -3885, -3906, -3927, -3948, -3969, -3990, -4011, -4032, -4053, -4074, -4095, -4116, -4137, -4158, -4179, -4200, -4221, -4242, -4263, -4284, -4305, -4326, -4347, -4368, -4389, -4410, -4431, -4452, -4473, -4494, -4515, -4536, -4557, -4578, -4599, -4620, -4641, -4662, -4683, -4704, -4725, -4746, -4767, -4788, -4809, -4830, -4851, -4872, -4893, -4914, -4935, -4956, -4977, -4998, -5019, -5040, -5061, -5082, -5103, -5124, -5145, -5166, -5187, -5208, -5229, -5250, -5271, -5292, -5313, -5334, -5355 ]
}
